#!/usr/bin/env python3
#take a synthesized address and convert it
#to the original and vice versa
#make it a shitty webapp using flask
import ipaddress
import argparse
import flask
from flask import request, jsonify, render_template
import os
import sys
import subprocess

def ipv6_to_ipv4(synthesized_ipv6, prefix):
    ipv6_addr = ipaddress.IPv6Address(synthesized_ipv6)
    prefix_network = ipaddress.IPv6Network(prefix, strict=False)

    prefix_len = prefix_network.prefixlen // 8  # Convert bits to bytes
    prefix_bytes = prefix_network.network_address.packed[:prefix_len]
    ipv6_bytes = ipv6_addr.packed

    if not ipv6_bytes.startswith(prefix_bytes):
        raise ValueError("The provided IPv6 address does not match the given prefix.")

    embedded_ipv4 = ipv6_bytes[prefix_len:prefix_len + 4]
    return str(ipaddress.IPv4Address(embedded_ipv4))

def ipv4_to_ipv6(ipv4, prefix):
    ipv4_addr = ipaddress.IPv4Address(ipv4)
    prefix_network = ipaddress.IPv6Network(prefix, strict=False)

    prefix_len = prefix_network.prefixlen // 8  # Convert bits to bytes
    prefix_bytes = prefix_network.network_address.packed[:prefix_len]
    ipv6_bytes = prefix_bytes + ipv4_addr.packed

    return str(ipaddress.IPv6Address(ipv6_bytes))

app = flask.Flask(__name__)
# embed the web form this time
@app.route('/')
def index():
    return '''
    <!DOCTYPE html>
    <html>
    <head>
        <title>RFC 6052 Converter</title>
    </head>
    <body>
        <h2>Convert IPv4 to IPv6 or vice versa</h2>
        <br>
        This can also be refererenced by it's API, but again, be mindful of resources. Example API use: 
        <br>
        <i>curl https://tools.forwardingplane.net/rfc6502/convert?source=<IP>&prefix=<PREFIX> | jq --color-output</i>

        <form action="/convert" method="get">
            <label for="source">Enter IP Address:</label>
            <input type="text" id="source" name="source" required>
            <label for="prefix">Prefix (optional):</label>
            <input type="text" id="prefix" name="prefix" value="64:ff9b::/96">
            <button type="submit">Convert</button>
        </form>
        <h3>This page is generated by rfc6502-converter, an open source project, freely usable and for which code can be founId <a href=https://github.com/buraglio/rfc6502-converter>here</a></h3>
    
    </body>
    </html>
    '''

@app.route('/convert', methods=['GET'])
def convert():
    source = request.args.get('source')
    prefix = request.args.get('prefix', '64:ff9b::/96')

    if not source:
        return jsonify({"error": "Missing source address"}), 400

    try:
        if ":" in source:
            converted_ip = ipv6_to_ipv4(source, prefix)
        else:
            converted_ip = ipv4_to_ipv6(source, prefix)
        return jsonify({"source": source, "converted": converted_ip})
    except ValueError as e:
        return jsonify({"error": str(e)}), 400

def run_flask():
    app.run(host="::1", port=5001)

def daemonize():
    with open("/dev/null", "r") as devnull_r, open("/dev/null", "a") as devnull_w:
        subprocess.Popen([sys.executable, __file__], stdout=devnull_w, stderr=devnull_w, stdin=devnull_r, close_fds=True)

def main():
    parser = argparse.ArgumentParser(description="Convert between RFC 6052 synthesized IPv6 and IPv4 addresses.")
    parser.add_argument("-s", "--source", help="Source IPv6 or IPv4 address.")
    parser.add_argument("-p", "--prefix", default="64:ff9b::/96", help="Prefix for translation (default: 64:ff9b::/96).")
    parser.add_argument("-d", "--daemon", action="store_true", help="Run as a web daemon.")

    args = parser.parse_args()

    if args.daemon:
        daemonize()
        print("Daemon started.")
    elif args.source:
        try:
            if ":" in args.source:
                converted_ip = ipv6_to_ipv4(args.source, args.prefix)
                print(f"IPv6 {args.source} -> IPv4 {converted_ip}")
            else:
                converted_ip = ipv4_to_ipv6(args.source, args.prefix)
                print(f"IPv4 {args.source} -> IPv6 {converted_ip}")
        except ValueError as e:
            print(f"Error: {e}")
    else:
        run_flask()

if __name__ == "__main__":
    main()
